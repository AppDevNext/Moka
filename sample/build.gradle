plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion sdkVersion

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion sdkVersion

        applicationId "com.sample.app"
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.sample.app.SampleAndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation "com.jakewharton.timber:timber:5.0.1"
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:${androidxTestEspresso}"

    androidTestImplementation project(':moka')
}

// necessary to capture screenshot
def adbDirectory = '/storage/emulated/0/Download'

def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.mustRunAfter {
            clearScreenshotsTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}