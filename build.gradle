buildscript {

    ext.kotlin_version = '1.3.60'

    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
        maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.android.tools.build:gradle:3.5.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }

    configurations {
        androidTestImplementation.exclude group: 'com.android.support', module: 'support-v4'
    }

}

ext {
    revision = getGitCommitHash()
    versionRevision = getGitCommitCount()

    sdkVersion = 29
    minSdk = 19
    javaVersion = JavaVersion.VERSION_1_8
    androidxTestEspresso = '3.2.0'
    androidxTestOrchestrator = '1.1.1'
    androidxTestExtJunit = '1.1.0'

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.android.support'
                    && !details.requested.name.contains('multidex')) {
                details.useVersion versions.support
            }
        }
    }
}

private def getPropertiesPath(String filename) {
    if (useAlwaysDebugKeystore) {
        return debugKeystoresPath + File.separator + debugKeystorePropertiesFileName
    } else {
        return keystoresPath + File.separator + filename
    }
}

allprojects {

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
    }

}

private static def getGitCommitCount() {
    try {
        return 'git rev-list --first-parent --count HEAD'.execute().text.trim() as Integer
    }
    catch (ignored) {
        return 0
    }
}

private static def getGitCommitHash() {
    try {
        return 'git rev-parse --short HEAD'.execute().text.trim()
    }
    catch (ignored) {
        return null
    }
}